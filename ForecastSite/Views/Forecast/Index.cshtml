@{
    ViewBag.Title = "DataForecast.io";
}
<div class="container-fluid standard-page">
    <div class="container">
        <div class="row">
            <div class="col-xs-offset-4 col-xs-4">
                <label id="fileLabel" for="files" class="btn btn-blue btn-larger">Select File</label>
                <input id="files" multiple type="file">
                <a id="read-file" class="btn-larger btn btn-grey">Read File</a>

                <label class="checkbox-div">
                    Does data contain ID's?
                    <input type="checkbox" checked="checked">
                    <span class="checkmark"></span>
                </label>
                <div id="byte_content"></div>

                <div class="container">
                    <br><br><br><br>
                    <form id="form" class="form-inline">
                        <div class="form-group">
                            <label class="sr-only" for="emailInput">Email address</label>
                            <input type="email" class="form-control" id="emailInput" placeholder="Email">
                        </div>
                        <div class="form-group">
                            <label class="sr-only" for="nameInput">Name</label>
                            <input type="text" class="form-control" id="nameInput" placeholder="First Name">
                        </div>
                        <button type="submit" class="btn btn-default">Submit</button>
                    </form>
                    <br>
                    <div id="successAlert" class="alert alert-success" role="alert" style="display:none;"></div>
                    <div id="errorAlert" class="alert alert-danger" role="alert" style="display:none;"></div>
                </div>
            </div>
        </div>
    </div>
</div>


@section scripts
{
    <script>
        $(document).ready(function () {
            var files = null;
            
            $("#files").on("input",
                function () {         
                    files = $("#files")[0].files;
                    var string = "";
                    for (var i = 0; i < files.length; i++) {
                        string = string + files[i].name + ", ";
                    }
                    $("#fileLabel").html(string);
                    
                });

            var stepped = 0, chunks = 0, rows = 0;
            var start, end;
            var pauseChecked = false;
            var printStepChecked = false;

            $('#read-file').click(function () {
                stepped = 0;
                chunks = 0;
                rows = 0;

                var files = $('#files')[0].files;
                var config = buildConfig();

                // NOTE: Chunk size does not get reset if changed and then set back to empty/default value
                /*
                if (localChunkSize)
                    Papa.LocalChunkSize = localChunkSize;
                if (remoteChunkSize)
                    Papa.RemoteChunkSize = remoteChunkSize;
                    */


                if (files.length > 0) {
                    /*
                     * TODO chunking files longer than 10 MB
                    if (!$('#stream').prop('checked') && !$('#chunk').prop('checked')) {
                        for (var i = 0; i < files.length; i++) {
                            if (files[i].size > 1024 * 1024 * 10) {
                                alert("A file you've selected is larger than 10 MB; please choose to stream or chunk the input to prevent the browser from crashing.");
                                return;
                            }
                        }
                    }
                    */

                    start = performance.now();
                    

                    $('#files').parse({
                        config: config,
                        before: function (file, inputElem) {
                            console.log("Parsing file:", file);
                        },
                        complete: function () {
                            console.log("Done with all files.");
                            // TODO Ajax to c# to log
                            $.ajax({

                            });
                        }
                    });
                };
            });




            function buildConfig() {               
                return {
                    delimiter: false,
                    newline: "",
                    header: false,
                    dynamicTyping: false,
                    preview: 0,
                    step: false,
                    //encoding: $('#encoding').val(),
                    worker: false,
                    //comments: $('#comments').val(),
                    complete: completeFn,
                    error: errorFn,
                    download: false,
                    fastMode: false,
                    skipEmptyLines: false,
                    chunk: false,
                    beforeFirstChunk: undefined,
                };

            }

            function stepFn(results, parserHandle) {
                stepped++;
                rows += results.data.length;

                parser = parserHandle;

                if (pauseChecked) {
                    console.log(results, results.data[0]);
                    parserHandle.pause();
                    return;
                }

                if (printStepChecked)
                    console.log(results, results.data[0]);
            }

            function chunkFn(results, streamer, file) {
                if (!results)
                    return;
                chunks++;
                rows += results.data.length;

                parser = streamer;

                if (printStepChecked)
                    console.log("Chunk data:", results.data.length, results);

                if (pauseChecked) {
                    console.log("Pausing; " + results.data.length + " rows in chunk; file:", file);
                    streamer.pause();
                    return;
                }
            }

            function errorFn(error, file) {
                console.log("ERROR:", error, file);
            }

            function completeFn() {
                end = performance.now();
                if (!$('#stream').prop('checked')
                    && !$('#chunk').prop('checked')
                    && arguments[0]
                    && arguments[0].data)
                    rows = arguments[0].data.length;

                console.log("Finished input (async). Time:", end - start, arguments);
                console.log("Rows:", rows, "Stepped:", stepped, "Chunks:", chunks);
            }

            $('#form').submit(function () {
                $.ajax({
                    data: {
                        name: $('#nameInput').val(),
                        email: $('#emailInput').val()
                    },
                    type: 'POST',
                    url: 'http://127.0.0.1:5000/process'
                }).done(function (data) {
                    alert("aap");
                    if (data.error) {
                        $('#errorAlert').text(data.error).show();
                        $('#successAlert').hide();
                    }
                    else {
                        $('#successAlert').text(data.name).show();
                        $('#errorAlert').hide();
                    }

                });

                event.preventDefault();
                return false;
            });
          

          /* $("#read-file").on("click",
                function () {                   
                    if (file == null) {
                        return;
                    }
                    var fileSize = file.size;

                    var $button = $(this);

                    // Reset content
                    $("#byte_content").html("");

                    // Parameters are file and chunksize
                    var lineReader = new LineReader(file, 1024);

                    // Event gets an array of full lines from the data
                    lineReader.on("lines",
                        function (lines) {
                            console.log(lines.length);
                            for (var line = 0; line < lines.length; line++) {
                                console.log(lines[line]);
                            };
                        });

                    lineReader.read();
                });
                */
                
        });

    </script>
}